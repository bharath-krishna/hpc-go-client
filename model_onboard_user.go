/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hpc

import (
	"encoding/json"
)

// checks if the OnboardUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnboardUser{}

// OnboardUser struct for OnboardUser
type OnboardUser struct {
	Username string `json:"username"`
	Namespace string `json:"namespace"`
	Cluster string `json:"cluster"`
	RoleName string `json:"role_name"`
}

// NewOnboardUser instantiates a new OnboardUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnboardUser(username string, namespace string, cluster string, roleName string) *OnboardUser {
	this := OnboardUser{}
	this.Username = username
	this.Namespace = namespace
	this.Cluster = cluster
	this.RoleName = roleName
	return &this
}

// NewOnboardUserWithDefaults instantiates a new OnboardUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnboardUserWithDefaults() *OnboardUser {
	this := OnboardUser{}
	return &this
}

// GetUsername returns the Username field value
func (o *OnboardUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *OnboardUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *OnboardUser) SetUsername(v string) {
	o.Username = v
}

// GetNamespace returns the Namespace field value
func (o *OnboardUser) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *OnboardUser) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *OnboardUser) SetNamespace(v string) {
	o.Namespace = v
}

// GetCluster returns the Cluster field value
func (o *OnboardUser) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *OnboardUser) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *OnboardUser) SetCluster(v string) {
	o.Cluster = v
}

// GetRoleName returns the RoleName field value
func (o *OnboardUser) GetRoleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value
// and a boolean to check if the value has been set.
func (o *OnboardUser) GetRoleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleName, true
}

// SetRoleName sets field value
func (o *OnboardUser) SetRoleName(v string) {
	o.RoleName = v
}

func (o OnboardUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnboardUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["namespace"] = o.Namespace
	toSerialize["cluster"] = o.Cluster
	toSerialize["role_name"] = o.RoleName
	return toSerialize, nil
}

type NullableOnboardUser struct {
	value *OnboardUser
	isSet bool
}

func (v NullableOnboardUser) Get() *OnboardUser {
	return v.value
}

func (v *NullableOnboardUser) Set(val *OnboardUser) {
	v.value = val
	v.isSet = true
}

func (v NullableOnboardUser) IsSet() bool {
	return v.isSet
}

func (v *NullableOnboardUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnboardUser(val *OnboardUser) *NullableOnboardUser {
	return &NullableOnboardUser{value: val, isSet: true}
}

func (v NullableOnboardUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnboardUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


