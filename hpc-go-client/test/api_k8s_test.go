/*
HPC Portal - API

Testing K8sAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hpc

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/bharath-krishna/hpc-go-client"
)

func Test_hpc_K8sAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test K8sAPIService CreateNamespace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.K8sAPI.CreateNamespace(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService CreateNamespacedJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var namespace string

		httpRes, err := apiClient.K8sAPI.CreateNamespacedJob(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService CreateNamespacedJobTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var namespace string

		httpRes, err := apiClient.K8sAPI.CreateNamespacedJobTemplate(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetJobDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var namespace string

		resp, httpRes, err := apiClient.K8sAPI.GetJobDetails(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var namespace string
		var jobName string

		resp, httpRes, err := apiClient.K8sAPI.GetLogs(context.Background(), cluster, namespace, jobName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetLogshell", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var namespace string
		var jobName string

		resp, httpRes, err := apiClient.K8sAPI.GetLogshell(context.Background(), cluster, namespace, jobName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetNamespacedPvcs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var namespace string

		resp, httpRes, err := apiClient.K8sAPI.GetNamespacedPvcs(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService GetUsersNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var username string

		httpRes, err := apiClient.K8sAPI.GetUsersNamespaces(context.Background(), cluster, username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService LaunchLogshell", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var namespace string
		var jobName string

		httpRes, err := apiClient.K8sAPI.LaunchLogshell(context.Background(), cluster, namespace, jobName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService ListAllJobDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.K8sAPI.ListAllJobDetails(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService ListAllJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string

		httpRes, err := apiClient.K8sAPI.ListAllJobs(context.Background(), cluster).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService ListClusters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.K8sAPI.ListClusters(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService ListClusters_1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.K8sAPI.ListClusters_0(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test K8sAPIService ListNamespacedJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cluster string
		var namespace string

		httpRes, err := apiClient.K8sAPI.ListNamespacedJobs(context.Background(), cluster, namespace).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
