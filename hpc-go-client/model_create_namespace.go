/*
HPC Portal - API

An interface for working with HPC clusters.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hpc

import (
	"encoding/json"
)

// checks if the CreateNamespace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNamespace{}

// CreateNamespace struct for CreateNamespace
type CreateNamespace struct {
	Namespace string `json:"namespace"`
	Cluster string `json:"cluster"`
}

// NewCreateNamespace instantiates a new CreateNamespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNamespace(namespace string, cluster string) *CreateNamespace {
	this := CreateNamespace{}
	this.Namespace = namespace
	this.Cluster = cluster
	return &this
}

// NewCreateNamespaceWithDefaults instantiates a new CreateNamespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNamespaceWithDefaults() *CreateNamespace {
	this := CreateNamespace{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *CreateNamespace) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *CreateNamespace) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *CreateNamespace) SetNamespace(v string) {
	o.Namespace = v
}

// GetCluster returns the Cluster field value
func (o *CreateNamespace) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *CreateNamespace) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *CreateNamespace) SetCluster(v string) {
	o.Cluster = v
}

func (o CreateNamespace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNamespace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace
	toSerialize["cluster"] = o.Cluster
	return toSerialize, nil
}

type NullableCreateNamespace struct {
	value *CreateNamespace
	isSet bool
}

func (v NullableCreateNamespace) Get() *CreateNamespace {
	return v.value
}

func (v *NullableCreateNamespace) Set(val *CreateNamespace) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNamespace(val *CreateNamespace) *NullableCreateNamespace {
	return &NullableCreateNamespace{value: val, isSet: true}
}

func (v NullableCreateNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


